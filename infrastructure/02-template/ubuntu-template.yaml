AWSTemplateFormatVersion: '2010-09-09'
Description: 'Development Environment Launch Template for Ubuntu'

Parameters:
  ProjectTag:
    Type: String
    Default: AgentDevEnv
    Description: Project tag value for all resources
  
  ManagedByTag:
    Type: String
    Default: Administrator
    Description: ManagedBy tag value for all resources

Resources:
  # IAM Role for EC2 instances
  DevInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: ManagedBy
          Value: !Ref ManagedByTag
  
  DevInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref DevInstanceRole
  
  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for development instances
      VpcId: 
        Fn::ImportValue: AgentDevEnv-VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic for package installation and updates
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: ManagedBy
          Value: !Ref ManagedByTag

  # Unified Development Environment Launch Template
  DevLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ProjectTag}-Dev-Environment
      VersionDescription: v1.1
      LaunchTemplateData:
        ImageId: 'ami-084568db4383264d4' # 24.04, ami-0f9de6e2d2f067fca is for Ubuntu 22.04 LTS (x86_64)
        # InstanceType is not specified here - will be provided when launching
        IamInstanceProfile:
          Name: !Ref DevInstanceProfile
        SecurityGroupIds:
          - !Ref DevSecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash
            # Update package lists
            apt-get update
            apt-get upgrade -y
            
            # Install basic development tools
            apt-get install -y git curl wget unzip build-essential
            
            # Install Docker
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            systemctl enable docker
            systemctl start docker
            
            # Install tools
            mkdir tools
            cd tools
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash
            echo 'export NVM_DIR="/home/ubuntu/.nvm"' >> /home/ubuntu/.bashrc
            echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> /home/ubuntu/.bashrc
            # Dot source the files to ensure that variables are available within the current shell
            . /home/ubuntu/.nvm/nvm.sh
            . /home/ubuntu/.profile
            . /home/ubuntu/.bashrc
            nvm install --lts
            nvm use --lts
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            # Install CDK
            npm install -g aws-cdk

            # Install GitHub CLI
            (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
              && sudo mkdir -p -m 755 /etc/apt/keyrings \
                    && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
                    && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
              && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
              && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
              && sudo apt update \
              && sudo apt install gh -y

            # Install Amazon Q Developer
            curl --proto '=https' --tlsv1.2 -sSf https://desktop-release.q.us-east-1.amazonaws.com/latest/amazon-q.deb -o amazon-q.deb
            apt install -y ./amazon-q.deb
            
            # Register with Systems Manager
            aws ssm register-default-patch-baseline --region ${AWS::Region}
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${ProjectTag}-DevInstance
              - Key: Project
                Value: !Ref ProjectTag
              - Key: ManagedBy
                Value: !Ref ManagedByTag
              - Key: Environment
                Value: Development

Outputs:
  LaunchTemplateId:
    Description: ID of Launch Template
    Value: !GetAtt DevLaunchTemplate.LaunchTemplateId
    Export:
      Name: AgentDevEnv-ubuntu-LaunchTemplateId

  LaunchTemplateVersion:
    Description: Version of Launch Template
    Value: !GetAtt DevLaunchTemplate.LatestVersionNumber
    Export:
      Name: AgentDevEnv-ubuntu-LaunchTemplateVersion
